var searchIndex = JSON.parse('{\
"os":{"doc":"","t":[5,0,0,0,0,0,0,14,14,5,0,0,0,0,0,0,17,17,17,17,17,17,17,17,3,11,11,11,11,5,11,11,11,11,7,7,5,5,5,7,3,7,3,11,11,11,11,11,11,11,11,12,12,11,11,5,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,5,11,11,11,11,11,17,17,17,17,5,5,5,5,5,0,3,11,11,11,11,12,11,11,11,11,11,17,17,17,17,17,0,0,5,17,5,3,3,11,11,11,11,11,11,11,11,11,12,12,5,5,5,5,12,12,11,11,11,11,11,11,12,3,3,3,12,11,11,11,11,11,11,0,12,11,5,11,11,11,11,12,11,11,11,5,11,5,11,12,5,11,5,11,5,0,0,12,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,5,13,13,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,17,17,5,5,5,0,5,5,5,3,11,11,11,11,11,12,11,12,11,11,11,12],"n":["clear_bss","config","console","heap_alloc","lang_items","loader","logging","print","println","rust_main","sbi","sync","syscall","task","timer","trap","APP_BASE_ADDRESS","APP_SIZE_LIMIT","CLOCK_FREQ","KERNEL_HEAP_SIZE","KERNEL_STACK_SIZE","MAX_APP_NUM","MAX_SYSCALL_NUM","USER_STACK_SIZE","Stdout","borrow","borrow_mut","from","into","print","try_from","try_into","type_id","write_str","HEAP_ALLOCATOR","HEAP_SPACE","handle_alloc_error","init_heap","panic","KERNEL_STACK","KernelStack","USER_STACK","UserStack","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","data","from","from","get_base_i","get_num_app","get_sp","get_sp","init_app_cx","into","into","load_apps","push_context","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","SimpleLogger","borrow","borrow_mut","enabled","flush","from","init","into","log","try_from","try_into","type_id","SBI_CONSOLE_GETCHAR","SBI_CONSOLE_PUTCHAR","SBI_SET_TIMER","SBI_SHUTDOWN","console_getchar","console_putchar","sbi_call","set_timer","shutdown","up","UPSafeCell","borrow","borrow_mut","exclusive_access","from","inner","into","new","try_from","try_into","type_id","SYSCALL_EXIT","SYSCALL_GET_TIME","SYSCALL_TASK_INFO","SYSCALL_WRITE","SYSCALL_YIELD","fs","process","syscall","FD_STDOUT","sys_write","TaskInfo","TimeVal","borrow","borrow","borrow_mut","borrow_mut","fmt","from","from","into","into","sec","status","sys_exit","sys_get_time","sys_task_info","sys_yield","syscall_times","time","try_from","try_from","try_into","try_into","type_id","type_id","usec","TASK_MANAGER","TaskManager","TaskManagerInner","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","context","current_task","deref","exit_current_and_run_next","find_next_task","from","from","from","inner","into","into","into","mark_current_exited","mark_current_exited","mark_current_suspended","mark_current_suspended","num_app","run_first_task","run_first_task","run_next_task","run_next_task","suspend_current_and_run_next","switch","task","tasks","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","TaskContext","borrow","borrow_mut","clone","clone_into","from","goto_restore","into","ra","s","sp","to_owned","try_from","try_into","type_id","zero_init","__switch","Exited","Ready","Running","TaskControlBlock","TaskStatus","UnInit","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","from","from","into","into","task_cx","task_status","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","MICRO_PER_SEC","TICKS_PER_SEC","get_time","get_time_us","set_next_trigger","context","enable_timer_interrupt","init","trap_handler","TrapContext","app_init_context","borrow","borrow_mut","from","into","sepc","set_sp","sstatus","try_from","try_into","type_id","x"],"q":["os","","","","","","","","","","","","","","","","os::config","","","","","","","","os::console","","","","","","","","","","os::heap_alloc","","","","os::lang_items","os::loader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::logging","","","","","","","","","","","","os::sbi","","","","","","","","","os::sync","os::sync::up","","","","","","","","","","","os::syscall","","","","","","","","os::syscall::fs","","os::syscall::process","","","","","","","","","","","","","","","","","","","","","","","","","","os::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::context","","","","","","","","","","","","","","","","os::task::switch","os::task::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::timer","","","","","os::trap","","","","os::trap::context","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get base address of app i.","Get the total number of applications.","","","get app info with entry and sp and save <code>TrapContext</code> in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Load nth user app at [APP_BASE_ADDRESS + n * …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","use sbi call to getchar from console (qemu uart handler)","use sbi call to putchar in console (qemu uart handler)","","use sbi call to set timer","use sbi call to shutdown the kernel","","Wrap a static data structure inside it so that we are able …","","","Panic if the data has been borrowed.","Returns the argument unchanged.","inner data","Calls <code>U::from(self)</code>.","User is responsible to guarantee that inner struct is only …","","","","","","","","","","","handle syscall exception with <code>syscall_id</code> and other …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","task exits and submit an exit code","get time with second and microsecond","YOUR JOB: Finish sys_task_info to pass testcases","current task gives up resources for other tasks","","","","","","","","","","","","","","","","","","","","","id of current <code>Running</code> task","","","Find next task to run and return app id.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","use inner value to get mutable access","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Change the status of current <code>Running</code> task into <code>Exited</code>.","","Change the status of current <code>Running</code> task into <code>Ready</code>.","total number of tasks","","Run the first task in task list.","","Switch current <code>Running</code> task to the task we have found, or …","","","","task list","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","read the <code>mtime</code> register","get current time in microseconds","set the next timer interrupt","","timer interrupt enabled","initialize CSR <code>stvec</code> as the entry of <code>__alltraps</code>","handle an interrupt, exception, or system call from user …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,2,3,2,3,2,3,2,3,2,3,2,3,0,0,2,3,0,2,3,0,2,2,3,2,3,2,3,2,3,0,4,4,4,4,4,0,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,6,7,6,7,7,6,7,6,7,7,6,0,0,0,0,6,6,6,7,6,7,6,7,7,0,0,0,8,9,10,8,9,10,8,0,10,8,0,9,9,10,8,9,9,10,8,0,9,0,9,9,0,9,0,9,0,0,0,10,9,10,8,9,10,8,9,10,8,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,0,0,12,13,12,13,12,13,12,13,12,12,13,12,13,12,13,13,13,12,13,12,13,12,13,12,0,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14],"f":[[[]],null,null,null,null,null,null,null,null,[[],["never",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["arguments",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["str",0]],["result",6]],null,null,[[["layout",3]],["never",0]],[[]],[[["panicinfo",3]],["never",0]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["kernelstack",3]],[[["",0]],["userstack",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[]],[[]],[[["usize",0]],["usize",0]],[[],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["usize",0]],["usize",0]],[[]],[[]],[[]],[[["",0],["trapcontext",3]],["usize",0]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["metadata",3]],["bool",0]],[[["",0]]],[[]],[[]],[[]],[[["",0],["record",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[],["usize",0]],[[["usize",0]]],[[["usize",0],["usize",0],["usize",0],["usize",0]],["usize",0]],[[["usize",0]]],[[],["never",0]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["refmut",3]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["usize",0]],["isize",0]],null,[[["usize",0],["usize",0]],["isize",0]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,[[["i32",0]],["never",0]],[[["usize",0]],["isize",0]],[[],["isize",0]],[[],["isize",0]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0]],["taskmanager",3]],[[]],[[["",0]],["option",4,[["usize",0]]]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["",0]]],[[]],[[["",0]]],null,[[]],[[["",0]],["never",0]],[[]],[[["",0]]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["taskcontext",3]],[[["",0],["",0]]],[[]],[[["usize",0]]],[[]],null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["taskcontrolblock",3]],[[["",0]],["taskstatus",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["taskstatus",4]],["bool",0]],[[]],[[]],[[]],[[]],null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[],["usize",0]],[[],["usize",0]],[[]],null,[[]],[[]],[[["trapcontext",3]],["trapcontext",3]],null,[[["usize",0],["usize",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],null,[[["",0],["usize",0]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null],"p":[[3,"Stdout"],[3,"KernelStack"],[3,"UserStack"],[3,"SimpleLogger"],[3,"UPSafeCell"],[3,"TaskInfo"],[3,"TimeVal"],[3,"TASK_MANAGER"],[3,"TaskManager"],[3,"TaskManagerInner"],[3,"TaskContext"],[4,"TaskStatus"],[3,"TaskControlBlock"],[3,"TrapContext"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};